name: Release

on:
  push:
    branches: [main]

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    if: "!startsWith(github.event.head_commit.message, 'bump:')"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Sync dev deps
        run: uv sync --group dev

      - name: Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Check if there are changes to release
        id: check_changes
        run: |
          # Get the last version tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            echo "No previous tags found, proceeding with release"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            # Check if there are any conventional commits since last tag
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --grep="^feat" --grep="^fix" --grep="^perf" --grep="^refactor" --grep="^BREAKING CHANGE" --extended-regexp)
            if [ -n "$COMMITS" ]; then
              echo "Found conventional commits since last tag:"
              echo "$COMMITS"
              echo "has_changes=true" >> $GITHUB_OUTPUT
            else
              echo "No conventional commits found since last tag"
              echo "has_changes=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Bump version and update changelog
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          # Bump version and update changelog
          uv run cz bump --yes

          # Get the new version
          NEW_VERSION=$(uv run cz version --project)
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Push changes
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git push origin main --follow-tags

      - name: Create GitHub Release
        if: steps.check_changes.outputs.has_changes == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NEW_VERSION }}
          release_name: Release v${{ env.NEW_VERSION }}
          body: |
            Changes in this Release

            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
          draft: false
          prerelease: false
